name: Deploy Workers

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  deployments: write

jobs:
  # Detectar cambios
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      core-service: ${{ steps.changes.outputs.core-service }}
      apis-gateway: ${{ steps.changes.outputs.apis-gateway }}
      channel-services: ${{ steps.changes.outputs.channel-services }}
      client: ${{ steps.changes.outputs.client }}
      consumer-billing-balance: ${{ steps.changes.outputs.consumer-billing-balance }}
      crypto-service: ${{ steps.changes.outputs.crypto-service }}
      etl-log-processor: ${{ steps.changes.outputs.etl-log-processor }}
      generator: ${{ steps.changes.outputs.generator }}
      integrations-gateway: ${{ steps.changes.outputs.integrations-gateway }}
      producer-billing-orchestrator: ${{ steps.changes.outputs.producer-billing-orchestrator }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            core-service:
              - 'apps/core-service/**'
            apis-gateway:
              - 'apps/apis-gateway/**'
            channel-services:
              - 'apps/channel-services/**'
            client:
              - 'apps/client/**'
            consumer-billing-balance:
              - 'apps/consumer-billing-balance/**'
            crypto-service:
              - 'apps/crypto-service/**'
            etl-log-processor:
              - 'apps/etl-log-processor/**'
            generator:
              - 'apps/generator/**'
            integrations-gateway:
              - 'apps/integrations-gateway/**'
            producer-billing-orchestrator:
              - 'apps/producer-billing-orchestrator/**'
            shared:
              - 'packages/**'
              - 'turbo.json'
              - 'package.json'
              - 'pnpm-lock.yaml'

  # Core Service
  deploy-core-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.core-service == 'true' || needs.detect-changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm turbo run deploy --filter=@worker/core-service
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - run: echo "✅ core-service deployed!"

  # API Gateway
  deploy-apis-gateway:
    needs: detect-changes
    if: needs.detect-changes.outputs.apis-gateway == 'true' || needs.detect-changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm turbo run deploy --filter=@worker/apis-gateway
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - run: echo "✅ apis-gateway deployed!"

  # Channel Services
  deploy-channel-services:
    needs: detect-changes
    if: needs.detect-changes.outputs.channel-services == 'true' || needs.detect-changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm turbo run deploy --filter=@worker/channel-services
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - run: echo "✅ channel-services deployed!"

  # Client
  deploy-client:
    needs: detect-changes
    if: needs.detect-changes.outputs.client == 'true' || needs.detect-changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm turbo run deploy --filter=@worker/client
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - run: echo "✅ client deployed!"

  # Consumer Billing Balance
  deploy-consumer-billing-balance:
    needs: detect-changes
    if: needs.detect-changes.outputs.consumer-billing-balance == 'true' || needs.detect-changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm turbo run deploy --filter=@worker/consumer-billing-balance
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - run: echo "✅ consumer-billing-balance deployed!"

  # Crypto Service
  deploy-crypto-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.crypto-service == 'true' || needs.detect-changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm turbo run deploy --filter=@worker/crypto-service
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - run: echo "✅ crypto-service deployed!"

  # ETL Log Processor
  deploy-etl-log-processor:
    needs: detect-changes
    if: needs.detect-changes.outputs.etl-log-processor == 'true' || needs.detect-changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm turbo run deploy --filter=@worker/etl-log-processor
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - run: echo "✅ etl-log-processor deployed!"

  # Generator
  deploy-generator:
    needs: detect-changes
    if: needs.detect-changes.outputs.generator == 'true' || needs.detect-changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm turbo run deploy --filter=@worker/generator
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - run: echo "✅ generator deployed!"

  # Integrations Gateway
  deploy-integrations-gateway:
    needs: detect-changes
    if: needs.detect-changes.outputs.integrations-gateway == 'true' || needs.detect-changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm turbo run deploy --filter=@worker/integrations-gateway
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - run: echo "✅ integrations-gateway deployed!"

  # Producer Billing Orchestrator
  deploy-producer-billing-orchestrator:
    needs: detect-changes
    if: needs.detect-changes.outputs.producer-billing-orchestrator == 'true' || needs.detect-changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm turbo run deploy --filter=@worker/producer-billing-orchestrator
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      - run: echo "✅ producer-billing-orchestrator deployed!"
