name: Monorepo Workers Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      workers:
        description: "Workers to deploy (comma separated) or leave empty for auto-detect"
        required: false
        type: string
        default: ""

permissions:
  contents: read
  deployments: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      workers: ${{ steps.changes.outputs.workers }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - id: changes
        run: |
          # Funci√≥n para convertir lista a JSON array
          to_json_array() {
            if [ -z "$1" ]; then
              echo "[]"
            else
              echo "$1" | tr ' ' '\n' | grep -v '^$' | sort -u | jq -R -s -c 'split("\n")[:-1]'
            fi
          }

          # Si es manual, usar los workers especificados
          if [ "${{ github.event.inputs.workers }}" != "" ]; then
            echo "üîß Manual deployment triggered"
            
            if [ "${{ github.event.inputs.workers }}" = "all" ]; then
              # Listar todos los workers
              ALL_WORKERS=$(find apps -maxdepth 1 -type d ! -name apps | sed 's|apps/||' | tr '\n' ' ')
              WORKERS=$(to_json_array "$ALL_WORKERS")
              echo "Manual - deploying all workers: $WORKERS"
            else
              # Convertir string separado por comas a lista limpia
              INPUT_WORKERS=$(echo "${{ github.event.inputs.workers }}" | tr ',' ' ' | tr -s ' ')
              WORKERS=$(to_json_array "$INPUT_WORKERS")
              echo "Manual - deploying specified workers: $WORKERS"
            fi
            
            # Verificar que los workers existen
            VALID_WORKERS=""
            for worker in $(echo "$INPUT_WORKERS"); do
              if [ -d "apps/$worker" ]; then
                VALID_WORKERS="$VALID_WORKERS $worker"
              else
                echo "‚ö†Ô∏è Warning: Worker '$worker' not found, skipping"
              fi
            done
            
            WORKERS=$(to_json_array "$VALID_WORKERS")
            
          else
            # Auto-detectar cambios
            echo "üîç Auto-detecting changed workers..."
            
            # Obtener archivos cambiados con mejor detecci√≥n
            if [ "${{ github.event_name }}" = "push" ]; then
              if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
                # Primer push a la rama
                CHANGED_FILES=$(git diff --name-only HEAD~1 2>/dev/null || git ls-tree --name-only -r HEAD)
              else
                CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
              fi
            else
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            fi
            
            echo "üìÅ Changed files:"
            echo "$CHANGED_FILES"
            
            # Listar todos los workers disponibles
            ALL_WORKERS=$(find apps -maxdepth 1 -type d ! -name apps | sed 's|apps/||' | tr '\n' ' ')
            echo "üîç Available workers: $ALL_WORKERS"
            
            # Detectar workers afectados
            AFFECTED_WORKERS=""
            
            # Primero verificar cambios en packages compartidos
            SHARED_CHANGED=false
            for file in $CHANGED_FILES; do
              if [[ $file == packages/shared/* ]] || [[ $file == packages/types/* ]] || \
                 [[ $file == packages/auth/* ]] || [[ $file == packages/api/* ]] || \
                 [[ $file == packages/notifications/* ]] || [[ $file == package.json ]] || \
                 [[ $file == pnpm-lock.yaml ]] || [[ $file == turbo.json ]]; then
                echo "üîÑ Shared dependency changed: $file - affecting all workers"
                SHARED_CHANGED=true
                break
              fi
            done
            
            if [ "$SHARED_CHANGED" = true ]; then
              AFFECTED_WORKERS="$ALL_WORKERS"
            else
              # Cambios espec√≠ficos en workers
              for file in $CHANGED_FILES; do
                if [[ $file == apps/*/* ]]; then
                  WORKER=$(echo $file | cut -d'/' -f2)
                  if [ -d "apps/$WORKER" ]; then
                    echo "  ‚úÖ Direct change detected in: $WORKER"
                    if [[ ! $AFFECTED_WORKERS =~ $WORKER ]]; then
                      AFFECTED_WORKERS="$AFFECTED_WORKERS $WORKER"
                    fi
                  fi
                fi
              done
            fi
            
            # Convertir a JSON array
            WORKERS=$(to_json_array "$AFFECTED_WORKERS")
            echo "üöÄ Workers to deploy: $WORKERS"
          fi

          # Determinar si hay cambios
          if [ "$WORKERS" = "[]" ] || [ "$WORKERS" = "" ]; then
            HAS_CHANGES="false"
            WORKERS="[]"
            echo "‚ÑπÔ∏è No workers to deploy"
          else
            HAS_CHANGES="true"
            echo "‚úÖ Found workers to deploy: $WORKERS"
          fi

          echo "workers=$WORKERS" >> $GITHUB_OUTPUT
          echo "has-changes=$HAS_CHANGES" >> $GITHUB_OUTPUT

  # Job que siempre se ejecuta para manejar el caso "sin cambios"
  check-deployment:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'false'
    steps:
      - name: No deployment needed
        run: |
          echo "‚ÑπÔ∏è No workers require deployment"
          echo "This can happen when:"
          echo "  - No relevant files were changed"
          echo "  - Manual deployment with empty worker list"
          echo "  - All specified workers don't exist"

  deploy:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        worker: ${{ fromJSON(needs.detect-changes.outputs.workers) }}
      fail-fast: false # Contin√∫a aunque un worker falle
      max-parallel: 3 # No m√°s de 3 deploys simult√°neos
    timeout-minutes: 20

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify worker exists
        run: |
          if [ ! -d "apps/${{ matrix.worker }}" ]; then
            echo "‚ùå Worker directory 'apps/${{ matrix.worker }}' not found"
            exit 1
          fi

          if [ ! -f "apps/${{ matrix.worker }}/package.json" ]; then
            echo "‚ùå Worker 'apps/${{ matrix.worker }}/package.json' not found"
            exit 1
          fi

          echo "‚úÖ Worker ${{ matrix.worker }} verified"

      - name: Deploy ${{ matrix.worker }}
        run: |
          echo "üöÄ Deploying ${{ matrix.worker }}..."
          pnpm turbo run deploy --filter=@worker/${{ matrix.worker }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Success!
        run: echo "‚úÖ ${{ matrix.worker }} deployed successfully ‚úÖ"

  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, check-deployment, deploy]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ Deployment Summary"
          echo "Workers detected: ${{ needs.detect-changes.outputs.workers }}"
          echo "Has changes: ${{ needs.detect-changes.outputs.has-changes }}"

          if [ "${{ needs.detect-changes.outputs.has-changes }}" = "false" ]; then
            echo "‚ÑπÔ∏è No workers required deployment"
            if [ "${{ needs.check-deployment.result }}" = "success" ]; then
              echo "‚úÖ Workflow completed successfully (no deployment needed)"
            else
              echo "‚ö†Ô∏è Check deployment job had issues"
            fi
          else
            if [ "${{ needs.deploy.result }}" = "success" ]; then
              echo "‚úÖ All deployments successful!"
            elif [ "${{ needs.deploy.result }}" = "failure" ]; then
              echo "‚ùå Some deployments failed"
              exit 1
            elif [ "${{ needs.deploy.result }}" = "cancelled" ]; then
              echo "‚ö†Ô∏è Deployments were cancelled"
              exit 1
            else
              echo "‚ö†Ô∏è Deployment job was skipped"
            fi
          fi
