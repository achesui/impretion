name: Monorepo Workers Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      workers:
        description: "Workers to deploy (comma separated) or leave empty for auto-detect"
        required: false
        type: string
        default: ""

permissions:
  contents: read
  deployments: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      workers: ${{ steps.changes.outputs.workers }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Necesario para git diff

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - id: changes
        run: |
          # Si es manual, usar los workers especificados
          if [ "${{ github.event.inputs.workers }}" != "" ]; then
            if [ "${{ github.event.inputs.workers }}" = "all" ]; then
              # Listar todos los workers
              WORKERS=$(ls apps/ | jq -R -s -c 'split("\n")[:-1]')
            else
              # Convertir string separado por comas a JSON array
              WORKERS=$(echo "${{ github.event.inputs.workers }}" | tr ',' '\n' | jq -R -s -c 'split("\n")[:-1]')
            fi
            echo "Manual workers selected: $WORKERS"
          else
            # Auto-detectar cambios inline
            echo "üîç Auto-detecting changed workers..."
            
            # Obtener archivos cambiados
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "üìÅ Changed files:"
            echo "$CHANGED_FILES"
            
            # Listar todos los workers
            ALL_WORKERS=$(ls apps/)
            echo "üîç All workers: $ALL_WORKERS"
            
            # Detectar workers afectados
            AFFECTED_WORKERS=""
            
            for file in $CHANGED_FILES; do
              echo "üìù Checking: $file"
              
              # Cambio directo en worker
              if [[ $file == apps/*/* ]]; then
                WORKER=$(echo $file | cut -d'/' -f2)
                echo "  ‚úÖ Direct change in: $WORKER"
                if [[ ! $AFFECTED_WORKERS =~ $WORKER ]]; then
                  AFFECTED_WORKERS="$AFFECTED_WORKERS $WORKER"
                fi
              fi
              
              # Cambio en packages compartidos
              if [[ $file == packages/shared/* ]] || [[ $file == packages/types/* ]] || [[ $file == packages/auth/* ]] || [[ $file == packages/api/* ]] || [[ $file == packages/notifications/* ]]; then
                echo "  üîÑ Shared package change, affecting all workers"
                AFFECTED_WORKERS="$ALL_WORKERS"
                break
              fi
            done
            
            # Convertir a JSON array
            if [ -z "$AFFECTED_WORKERS" ]; then
              WORKERS="[]"
            else
              WORKERS=$(echo $AFFECTED_WORKERS | tr ' ' '\n' | sort -u | jq -R -s -c 'split("\n")[:-1]')
            fi
            
            echo "üöÄ Workers to deploy: $WORKERS"
          fi

          echo "workers=$WORKERS" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.workers != '[]' && needs.detect-changes.outputs.workers != ''
    strategy:
      matrix:
        worker: ${{ fromJSON(needs.detect-changes.outputs.workers) }}
      fail-fast: false # Contin√∫a aunque un worker falle
      max-parallel: 3 # No m√°s de 3 deploys simult√°neos
    timeout-minutes: 20

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy ${{ matrix.worker }}
        run: pnpm turbo run deploy --filter=@worker/${{ matrix.worker }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Success!
        run: echo "‚úÖ ${{ matrix.worker }} deployed successfully ‚úÖ"

  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ Deployment Summary"
          echo "Workers: ${{ needs.detect-changes.outputs.workers }}"

          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "‚úÖ All deployments successful!"
          elif [ "${{ needs.deploy.result }}" = "failure" ]; then
            echo "‚ùå Some deployments failed"
            exit 1
          else
            echo "‚ö†Ô∏è No workers to deploy"
          fi
