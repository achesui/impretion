// templates/appointments.ts
import { twilioClient } from "./client";
import {
  cleanIndentation,
  formatDate,
  formatPhone,
  formatTime,
} from "../../utils";
import { Twilio } from "twilio";
import { SubaccountTokens } from "./twilio-types";

export const appointmentHandlers = {
  // Template de meta requerido
  newAppointmentNotification: async (
    env: Env,
    data: { name: string; date: string; time: string },
    from: string,
    to: string,
    connectionType: string,
  ) => {
    const { time, date } = data;
    const message = cleanIndentation(`
üìÖ *NUEVA CITA AGENDADA*

‚è≥ Fecha: ${formatDate(date)}
‚è∞ Hora: ${formatTime(time)}

üë§ INFORMACI√ìN DEL USUARIO:
- Nombre: ${data.name}
- Tel√©fono: ${formatPhone(phone)}`);

    await twilioClient(env).messages.create({
      from: "whatsapp:+14155238886",
      to: `whatsapp:+573146816140`,
      body: message,
    });
    return message;
  },

  // Template de meta requerido
  appointmentReminder: async (
    env: Env,
    data: { name: string; date: string; time: string },
    from: string,
    to: string,
    connectionType: string,
  ) => {
    const message = `
¬°Hola ${data.name}! üòä

Solo para recordarte que ma√±ana tienes tu cita odontol√≥gica:

üóìÔ∏è ${formatDate(data.date)} a las ${formatTime(data.time)}


¬°Nos vemos pronto! ‚ú®
`.trim();

    await twilioClient(env).messages.create({
      from: "whatsapp:+14155238886",
      to: `whatsapp:+57${phone}`,
      body: message,
    });
    return true;
  },

  appointmentDetails: async (
    env: Env,
    data: {
      email: string;
      name: string;
      date: string;
      time: string;
      status: string;
      code: string;
    },
    phone: string,
  ) => {
    const statusDots: Record<string, string> = {
      pending: "üü° Tu cita est√° pendiente.",
      completed: "üü¢ Tu cita fue realizada.",
      canceled: "üî¥ Tu cita fue cancelada.",
    };

    const message = cleanIndentation(`üìÖ *Detalles de tu cita*

${formatDate(data.date)} a las ${formatTime(data.time)}
üë§ ${data.name}
üìß ${data.email}
üì± ${phone}
${statusDots[data.status] || "‚ö™"}`);

    await twilioClient(env).messages.create({
      from: "whatsapp:+14155238886",
      to: `whatsapp:+57${phone}`,
      body: message,
    });
    return true;
  },

  createdAppointment: async (
    env: Env,
    data: {
      email: string;
      name: string;
      date: string;
      time: string;
      code: string;
    },
    phone: string,
  ) => {
    const message = cleanIndentation(`
üìÖ *TU CITA HA SIDO AGENDADA*

‚è≥ Fecha: ${formatDate(data.date)}
‚è∞ Hora: ${formatTime(data.time)}

üë§ INFORMACI√ìN DEL USUARIO:
- Nombre: ${data.name}
- Email: ${data.email}
- Tel√©fono: ${formatPhone(phone)}

üü¢ Puedes usar el c√≥digo *${data.code}* para actualizar o cancelar tu cita.`);

    await twilioClient(env).messages.create({
      from: "whatsapp:+14155238886",
      to: `whatsapp:+573146816140`,
      body: message,
    });
    return true;
  },
};

// C√≥digos de verificaci√≥n los tokens de subaccount si deben ser los de "impretion" en Twilio.
export const verificationHandlers = {
  verification: async (
    env: Env,
    data: string,
    subaccountTokens: SubaccountTokens,
    from: string,
    to: string,
  ) => {
    const code = Array.from(
      { length: 6 },
      () => Math.floor(Math.random() * 9) + 1,
    ).join("");

    const twilio = await twilioClient(subaccountTokens);

    console.log("to => ", to);
    console.log("from => ", from);
    console.log("code => ", code);
    const twilioInstance = await twilio.messages.create({
      from: "whatsapp:+573233311171", // "whatsapp:+14155238886" - "whatsapp:+573233311171" <- prod
      contentSid: "HX8b747b69d3fc62e95446ea8457234197", // HX68e26837d0e6e3343e64a7c0b1db425f - HX8b747b69d3fc62e95446ea8457234197 <- prod
      contentVariables: JSON.stringify({ 1: code }),
      to: `whatsapp:${to}`,
    });
    console.log("instancia de twilio => ", twilioInstance);

    // Se guarda el c√≥digo de verificaci√≥n en un KV el cual expira luego de 900 segundos.
    await env.SYSTEM_CACHE.put(
      `direct-connection-verification-code-${to}`,
      code,
      {
        expirationTtl: 900,
      },
    );

    return true;
  },
};

export const defaultHandlers = {
  commonMessage: async (
    env: Env,
    data: string,
    subaccountTokens: SubaccountTokens,
    from: string,
    to: string,
  ): Promise<boolean> => {
    try {
      const { accountSid, authToken } = subaccountTokens;
      console.log("datos de la subcuenta: ", accountSid, authToken);

      // Validar que tenemos los datos necesarios
      if (!accountSid || !authToken) {
        throw new Error(
          "accountSid y authToken son requeridos para enviar mensajes",
        );
      }

      if (!data || !from || !to) {
        throw new Error("data, from y to son requeridos para enviar mensajes");
      }

      const decryptedAuthTokenResponse =
        await env.CRYPTO_SERVICE.symmetricOperation({
          action: "decrypt",
          data: authToken,
        });

      if (
        !decryptedAuthTokenResponse.success ||
        !decryptedAuthTokenResponse.data
      ) {
        throw new Error(
          "Error desencriptando el token desde los metadatos de la subacountgit de Twilio al enviar un mensaje com√∫n.",
        );
      }

      console.log(
        "acc tokens => ",
        accountSid,
        decryptedAuthTokenResponse.data,
      );

      const twilio = twilioClient({
        accountSid,
        authToken: decryptedAuthTokenResponse.data,
      });

      console.log("instancia de twilio : ", twilio);

      console.log("message pairs : ", "from:", from, "to:", to, "data:", data);

      // CORRECCI√ìN PRINCIPAL: El 'from' debe ser tu n√∫mero de WhatsApp Business (to en tus par√°metros)
      // y el 'to' debe ser el n√∫mero del usuario (from en tus par√°metros)
      const twilioMessage = await twilio.messages.create({
        from: `whatsapp:${to}`,
        to: `whatsapp:${from}`,
        body: data,
      });

      console.log("twilio message: ", twilioMessage);

      // Verificar que el mensaje fue enviado correctamente
      if (!twilioMessage.sid) {
        throw new Error("El mensaje no pudo ser enviado, no se recibi√≥ SID");
      }

      return true;
    } catch (error) {
      console.error("Error en mensaje com√∫n de Twilio: ", error);

      // Re-lanzar el error para que pueda ser manejado por el c√≥digo que llama a esta funci√≥n
      throw error;
    }
  },
};
